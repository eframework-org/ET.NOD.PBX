name: Publish

on:
  workflow_dispatch:
      inputs:
        confirm:
          description: 'Type the repository name (owner/repo) to proceed.'
          required: true

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Validate confirmation
      if: github.event.inputs.confirm != github.repository
      run: |
        echo "The confirm input: ${{ github.event.inputs.confirm }} must match the repository name: ${{ github.repository }} to proceed with the publish action."
        exit 1

  test:
    needs: validate
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.5'

    - name: Install unzip
      if: matrix.os == 'windows-latest'
      run: choco install unzip -y

    - name: Install dependencies
      run: npm install

    - name: Run release
      run: npm run release

    - name: Run link
      run: npm link

    - name: Run tests
      run: npm test

  publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org'
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23.5'

    - name: Publish to npm
      run: npm publish --access public
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH }}

    - name: Create and push tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "Creating tag v$VERSION"
        git tag v$VERSION
        git push origin v$VERSION